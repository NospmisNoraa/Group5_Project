using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

class Program
{
    static string filePath = "contacts.txt"; // Define the file path

    static void Main()
    {
        var contacts = LoadDictionary();

        while (true)
        {
            DisplayOptions(); // Show menu options

            Console.Write("\nEnter your choice: ");
            char choice = Console.ReadKey().KeyChar; // Read user choice
            Console.WriteLine(); // Move to the next line

            switch (choice)
            {
                case 'a':
                    AddNewKeyValue(contacts);
                    break;
                case 'b':
                    DisplayContactContents(contacts);
                    break;
                case 'c':
                    RemoveContact(contacts);
                    break;
                case 'e':
                    EditContact(contacts);
                    break;
                case 's':
                    SaveContacts(contacts);
                    break;
                case 'g':
                    SortKeys(contacts);
                    break;
                case 'x':
                    Console.WriteLine("Exiting the program. Goodbye!");
                    Environment.Exit(0); // Exit gracefully
                    break;
                default:
                    Console.WriteLine("Invalid option. Please select a valid choice from the menu.");
                    break;
            }
        }
    }

    // Load contacts from file with error handling
    static Dictionary<string, List<string>> LoadDictionary()
    {
        var dictionary = new Dictionary<string, List<string>>();

        try
        {
            if (File.Exists(filePath))
            {
                var lines = File.ReadAllLines(filePath);
                foreach (var line in lines)
                {
                    var parts = line.Split(new[] { ':' }, 2);
                    if (parts.Length == 2)
                    {
                        var key = parts[0].Trim();
                        var values = parts[1].Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                             .Select(v => v.Trim()).ToList();
                        dictionary[key] = values;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dictionary: {ex.Message}");
        }

        return dictionary;
    }

    // Display menu options
    static void DisplayOptions()
    {
        Console.WriteLine("==================================");
        Console.WriteLine("Menu Options:");
        Console.WriteLine("a. Add a New Contact");
        Console.WriteLine("b. Display Contact Contents");
        Console.WriteLine("c. Remove a Contact");
        Console.WriteLine("e. Edit a Contact");
        Console.WriteLine("s. Save Contacts to File");
        Console.WriteLine("g. Sort the Keys");
        Console.WriteLine("x. Exit");
        Console.WriteLine("==================================");
    }

    // Read user input
    static string ReadInput(string prompt)
    {
        Console.Write(prompt);
        return Console.ReadLine()?.Trim();
    }

    // Add a new key-value pair to the dictionary with input validation
    static void AddNewKeyValue(Dictionary<string, List<string>> dictionary)
    {
        string key = ReadInput("Enter new key (3-50 characters, alphanumeric only): ");
        string value = ReadInput("Enter value (1-100 characters): ");

        // Validate key
        if (!IsValidKey(key))
        {
            Console.WriteLine("Invalid key. Key must be between 3 and 50 characters and can only contain alphanumeric characters.");
            return;
        }

        // Validate value
        if (!IsValidValue(value))
        {
            Console.WriteLine("Invalid value. Value must be between 1 and 100 characters.");
            return;
        }

        // Check if key already exists
        if (!dictionary.ContainsKey(key))
        {
            dictionary[key] = new List<string> { value };
            Console.WriteLine($"New key '{key}' added with value '{value}'.\n");
        }
        else
        {
            Console.WriteLine("Key already exists. Use option 'e' to add values to an existing key.\n");
        }
    }

    // Validate the key
    static bool IsValidKey(string key)
    {
        return !string.IsNullOrWhiteSpace(key) &&
               key.Length >= 3 && key.Length <= 50 &&
               Regex.IsMatch(key, @"^[a-zA-Z0-9]+$"); // Only alphanumeric characters
    }

    // Validate the value
    static bool IsValidValue(string value)
    {
        return !string.IsNullOrWhiteSpace(value) &&
               value.Length >= 1 && value.Length <= 100; // Value length check
    }

    // Display the contents of the contacts
    static void DisplayContactContents(Dictionary<string, List<string>> contacts)
    {
        Console.WriteLine("\nContacts:");

        if (contacts.Count == 0)
        {
            Console.WriteLine("No contacts found.\n");
            return;
        }

        foreach (var kvp in contacts)
        {
            Console.WriteLine($"Name: {kvp.Key}, Details: {string.Join(", ", kvp.Value)}");
        }
        Console.WriteLine();
    }

    // Remove a contact from the dictionary
    static void RemoveContact(Dictionary<string, List<string>> contacts)
    {
        string name = ReadInput("Enter contact name to remove: ");

        if (contacts.Remove(name))
        {
            Console.WriteLine($"Contact '{name}' removed successfully.\n");
        }
        else
        {
            Console.WriteLine("Contact not found. Please check the name and try again.\n");
        }
    }

    // Edit a contact's details
    static void EditContact(Dictionary<string, List<string>> contacts)
    {
        string name = ReadInput("Enter contact name to edit: ");

        if (!contacts.ContainsKey(name))
        {
            Console.WriteLine("Contact not found. Please check the name and try again.\n");
            return;
        }

        Console.WriteLine($"Current details for '{name}': {string.Join(", ", contacts[name])}");

        var newDetails = new List<string>();

        string newValue = ReadInput("Enter new value (or press enter to keep current): ");
        newDetails.Add(string.IsNullOrWhiteSpace(newValue) ? contacts[name].FirstOrDefault() : newValue);

        contacts[name] = newDetails;
        Console.WriteLine($"Contact '{name}' updated successfully.\n");
    }

    // Save the contacts to a file
    static void SaveContacts(Dictionary<string, List<string>> contacts)
    {
        try
        {
            using (var writer = new StreamWriter(filePath))
            {
                foreach (var kvp in contacts)
                {
                    writer.WriteLine($"{kvp.Key}: {string.Join(", ", kvp.Value)}");
                }
            }
            Console.WriteLine("Contacts saved to file.\n");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving contacts: {ex.Message}");
        }
    }

    // Sort and display the keys in the dictionary
    static void SortKeys(Dictionary<string, List<string>> contacts)
    {
        Console.WriteLine("\nSorted Contacts:");
        var sortedKeys = contacts.Keys.OrderBy(k => k).ToList();

        foreach (var key in sortedKeys)
        {
            Console.WriteLine($"Name: {key}, Details: {string.Join(", ", contacts[key])}");
        }
        Console.WriteLine();
    }
}